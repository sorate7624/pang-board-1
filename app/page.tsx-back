"use client"
import React, { useState } from "react"
import { useRouter } from "next/navigation"
import Image from "next/image"
import logo from "../public/pang-board.png"
import "animate.css/animate.min.css"
import variables from "./scss/variables.module.scss"
import signinStyles from "./scss/signin.module.scss"
import classNames from "classnames"
import {
  faEye,
  faEyeSlash,
  faTriangleExclamation,
  faCircleCheck,
} from "@fortawesome/free-solid-svg-icons"
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome"
import axios from "axios"

export default function Page() {
  const router = useRouter()
  const DEVELOP_URL = "http://api.hyoshincopy.com"
  const [id, setId] = useState("")
  const [password, setPassword] = useState("")
  const [errorSignin, setErrorSignin] = useState("")
  const [errorSignup, setErrorSignup] = useState("")
  // const [successSignin, setSuccessSignin] = useState(true)
  const [successSignin, setSuccessSignin] = useState(false)
  const [successSignup, setSuccessSignup] = useState("")
  const [eyeIconVisible, setEyeIconVisible] = useState(false)
  const [isSigninActive, setIsSigninActive] = useState(true)

  const handleIdChange = (event: any) => {
    setId(event.target.value)
  }

  const handlePasswordChange = (event: any) => {
    setPassword(event.target.value)
  }

  const togglePasswordVisibility = () => {
    setEyeIconVisible(!eyeIconVisible)
  }

  ///////////////////////////

  const handleSigninSubmit = async (event: any) => {
    event.preventDefault()

    try {
      const response = await axios.post(
        `${DEVELOP_URL}/signin`,
        {
          signinId: id,
          signinPw: password,
        },
        {
          withCredentials: true,
        },
      )
      setErrorSignin("")
      setSuccessSignin(true)
      console.log("response.data: ", response.data)
      console.log("response: ", response)
      console.log("로그인 성공했으니 목록으로 넘어가야 함")
      // const token = response.data.token;

      // router.push(`${DEVELOP_URL}/dashboard?Authorization=${token}`);
      // api.hyoshincopy.com

      const token = response.data.token // JWT 토큰 값
      try {
        const response = await axios.get(`${DEVELOP_URL}/dashboard`, {
          headers: {
            Authorization: `${token}`,
          },
        })
        console.log("response", response)
        // setResponseData(response.data);
        // router.push(`${DEVELOP_URL}/dashboard`);
        router.push(`/dashboard`)
        // const data_list = res["data"]
      } catch (error) {
        // 에러 처리
        console.log("에러 페이지")
      }
    } catch (error: any) {
      const errorCode = error.response.status
      setErrorSignin(error.message)

      // setSuccessSignup('');
      if (errorCode === 400) {
        setErrorSignin("Invalid ID/Password. Please try again.")
      } else {
        setErrorSignin("Server error. Please Contact Pang.")
      }
      console.error("로그인 실패:", error.message)
      console.log(error)
    }
  }

  const handleSignupSubmit = async (event: any) => {
    event.preventDefault()

    try {
      const response = await axios.post(
        `${DEVELOP_URL}/signup`,
        {
          signupId: id,
          signupPw: password,
        },
        {
          withCredentials: true,
        },
      )
      console.log("response.data: ", response.data)

      setErrorSignup("")
      setSuccessSignup("Sign up is complete. Please log in.")
    } catch (error: any) {
      const errorCode = error.response.status
      setSuccessSignup("")
      if (errorCode === 400) {
        setErrorSignup("ID is duplicated.")
      } else {
        setErrorSignup("Server error. Please Contact Pang.")
      }
      console.error("회원 등록 실패:", error.message)
      console.log(error)
    }
  }

  const toggleSigninButton = (event: any) => {
    const isSigninButton = event.target.getAttribute("data-status") === "signin"

    if (isSigninButton) {
      setIsSigninActive(true)
    } else {
      setIsSigninActive(false)
    }

    setId("")
    setPassword("")
    setEyeIconVisible(false)
    setErrorSignin("")
    setErrorSignup("")
    setSuccessSignup("")
  }

  return (
    <div className={signinStyles["wrapper"]}>
      <header className={signinStyles["header"]}>
        <h1 className={classNames(signinStyles["logo"], "animate__animated animate__bounce")}>
          <Image src={logo} alt="pang-board-icon" />
          <a href="#" style={{ color: variables.lavenderColor }}>
            Pang Board
          </a>
        </h1>
      </header>
      <main>
        <div className={classNames(signinStyles["box"], "animate__animated animate__fadeIn")}>
          {isSigninActive ? (
            <form className={signinStyles["box-signin"]} onSubmit={handleSigninSubmit}>
              <div className={signinStyles["top-header"]}>
                <h3>Welcome, Pang board</h3>
                <small>We are happy to have you back.</small>
              </div>
              <div className={signinStyles["input-group"]}>
                <div className={signinStyles["input-field"]}>
                  <input
                    type="text"
                    value={id}
                    onChange={handleIdChange}
                    id="signinId"
                    required
                    className={signinStyles["input-box"]}
                  />
                  <label htmlFor="signinId">ID</label>
                </div>
                <div className={signinStyles["input-field"]}>
                  <input
                    type={eyeIconVisible ? "text" : "password"}
                    id="signinPassword"
                    value={password}
                    onChange={handlePasswordChange}
                    required
                    className={signinStyles["input-box"]}
                  />
                  <label htmlFor="signinPassword">Password</label>
                  <div className={signinStyles["eye-area"]}>
                    <div className={signinStyles["eye-box"]} onClick={togglePasswordVisibility}>
                      <FontAwesomeIcon icon={eyeIconVisible ? faEye : faEyeSlash} />
                    </div>
                  </div>
                </div>
                <input
                  type="submit"
                  className={classNames(signinStyles["input-submit"], signinStyles["signin"])}
                  value="Sign In"
                />
              </div>
              {errorSignin && (
                <p className={signinStyles["notice-txt"]}>
                  <FontAwesomeIcon icon={faTriangleExclamation} />
                  {errorSignin}
                </p>
              )}
            </form>
          ) : (
            <form className={signinStyles["box-signup"]} onSubmit={handleSignupSubmit}>
              <div className={signinStyles["top-header"]}>
                <h3>Sign Up, Now</h3>
                <small>We are happy to have you with us.</small>
              </div>
              <div className={signinStyles["input-group"]}>
                <div className={signinStyles["input-field"]}>
                  <input
                    type="text"
                    value={id}
                    onChange={handleIdChange}
                    id="signupId"
                    required
                    className={signinStyles["input-box"]}
                  />
                  <label htmlFor="signupId">ID</label>
                </div>
                <div className={signinStyles["input-field"]}>
                  <input
                    type={eyeIconVisible ? "text" : "password"}
                    id="signupPassword"
                    value={password}
                    onChange={handlePasswordChange}
                    required
                    className={signinStyles["input-box"]}
                  />
                  <label htmlFor="signupPassword">Password</label>
                  <div className={signinStyles["eye-area"]}>
                    <div className={signinStyles["eye-box"]} onClick={togglePasswordVisibility}>
                      <FontAwesomeIcon icon={eyeIconVisible ? faEye : faEyeSlash} />
                    </div>
                  </div>
                </div>
                <input
                  type="submit"
                  className={classNames(signinStyles["input-submit"], signinStyles["signup"])}
                  value="Sign Up"
                />
              </div>
              {errorSignup && (
                <p className={signinStyles["notice-txt"]}>
                  <FontAwesomeIcon icon={faTriangleExclamation} />
                  {errorSignup}
                </p>
              )}
              {successSignup && (
                <p className={classNames(signinStyles["notice-txt"], signinStyles["success"])}>
                  <FontAwesomeIcon icon={faCircleCheck} />
                  {successSignup}
                </p>
              )}
            </form>
          )}
          <div className={signinStyles["switch"]} onClick={toggleSigninButton}>
            {isSigninActive ? (
              <>
                <button
                  className={classNames(signinStyles["signin"], signinStyles["btn-active"])}
                  data-status="signin"
                >
                  Sign In
                </button>
                <button className={signinStyles["signup"]} data-status="signup">
                  Sign Up
                </button>
              </>
            ) : (
              <>
                <button className={signinStyles["signin"]} data-status="signin">
                  Sign In
                </button>
                <button
                  className={classNames(signinStyles["signup"], signinStyles["btn-active"])}
                  data-status="signup"
                >
                  Sign Up
                </button>
              </>
            )}
          </div>
        </div>
      </main>

      {/* <button type="button" onClick={() => router.push('/dashboard')}>
        Dashboard
      </button> */}
    </div>
  )
}
